from fastapi import FastAPI, Depends, HTTPException, status
from fastapi.middleware.cors import CORSMiddleware
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
import uvicorn
import os

# Apply JWT authentication fix before importing other modules
print("Applying JWT authentication fix...")
try:
    # Set the correct SECRET_KEY in environment
    os.environ["SECRET_KEY"] = "bvKmIR-A0kWrSvZaqaZ9c5XDUy8AkXsG5x1GG2vYJ7I"
    # Import and apply the JWT fix
    from app.fix_jwt_auth import fix_jwt_verification
    print("JWT authentication fix applied successfully")
except Exception as e:
    print(f"Warning: Could not apply JWT fix: {str(e)}")


# Apply user ID type fix
print("Applying user ID type patch...")
try:
    # Import and apply the user ID type patch
    from app.user_id_type_patch import apply_patches
    print("User ID type patch applied successfully")
except Exception as e:
    print(f"Warning: Could not apply user ID type patch: {str(e)}")


# Apply user ID type fix
print("Applying user ID type patch...")
try:
    # Import and apply the user ID type patch
    from app.user_id_type_patch import apply_patches
    print("User ID type patch applied successfully")
except Exception as e:
    print(f"Warning: Could not apply user ID type patch: {str(e)}")

# Apply document upload fix
print("Applying document upload patch...")
try:
    # Import and apply the document upload patch
    from app.document_upload_patch import apply_patches
    print("Document upload patch applied successfully")
except Exception as e:
    print(f"Warning: Could not apply document upload patch: {str(e)}")

from app.core.config import settings
from app.core.database_supabase import get_db_service, DatabaseService
from app.core.security import verify_token
from app.dependencies_supabase import get_current_user, get_admin_user
# Remove SQLAlchemy imports - we're using Supabase only
from app.api.auth_supabase import router as auth_router
# We'll update these other routers to use Supabase too
# from app.api.projects import router as projects_router
# from app.api.documents import router as documents_router
# from app.api.annotations import router as annotations_router
# from app.api.admin import router as admin_router

app = FastAPI(
    title=settings.app_name,
    version=settings.version,
    description="FastAPI backend for Scientific Text Annotator - Supabase Edition",
    docs_url="/docs" if settings.debug else None,
    redoc_url="/redoc" if settings.debug else None,
)

# CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=settings.allowed_origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Security is now imported from dependencies_supabase

# Include routers
app.include_router(auth_router, prefix="/api/auth", tags=["authentication"])

# New Supabase-only routers (require email verification)
from app.api.projects_supabase import router as projects_supabase_router
app.include_router(projects_supabase_router, prefix="/api/projects", tags=["projects"])

from app.api.tagsets_supabase import router as tagsets_supabase_router
app.include_router(tagsets_supabase_router, prefix="/api/tagsets", tags=["tagsets"])

from app.api.documents_supabase import router as documents_supabase_router
app.include_router(documents_supabase_router, prefix="/api/documents", tags=["documents"])

# TODO: Update these remaining routers to use Supabase
# app.include_router(annotations_router, prefix="/api/annotations", tags=["annotations"])
# app.include_router(admin_router, prefix="/api/admin", tags=["admin"])

@app.get("/")
async def root():
    """Root endpoint"""
    print(f"Server started at http://0.0.0.0:8000")
    print(f"API version: {settings.version}")
    print(f"API environment: {settings.environment}")
    print(f"Debug mode: {settings.debug}")
    return {
        "message": "Scientific Text Annotator API",
        "version": settings.version,
        "status": "running"
    }

@app.get("/health")
async def health_check():
    """Health check endpoint"""
    return {"status": "healthy"}

if __name__ == "__main__":
    uvicorn.run(
        "main:app",
        host="0.0.0.0",
        port=8000,
        reload=settings.debug
    )
